//used for most guns
class Gun : Weapon 
{
string pckup;
string throw;
string name;
bool ditch;

property Pickup: pckup;
property Throw: throw;
property Name: name;
property DitchGun: ditch;

	action void A_ThrowGun(class<Actor> throw, class<Inventory> amm)
	{
		A_PlaySound("skeleton/swing", CHAN_WEAPON);
		A_FireProjectile(throw, 0, false, 0, 8, FPF_NOAUTOAIM);
		A_TakeInventory(amm);
		A_TakeInventory("ammcount", 100);
	}	
		
	action void A_NoGun(class<Inventory> weap, bool ditch = true)	
	{
		A_TakeInventory(weap);
		
		if (ditch == true)
		{
			A_TakeInventory("agun");
		}
	}
	
	action void A_AllowThrow(bool allowshoot = false) //allows the use of alt-fire
	{
		if (allowshoot==true)
		{
			A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH);
		} else {
			A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_NOPRIMARY);
		}
	}

Default
  {
  Weapon.AmmoUse 0;
  Weapon.BobStyle "Alpha";
  Weapon.BobSpeed 1.5;
  +WEAPON.NOAUTOAIM
  +WEAPON.AMMO_OPTIONAL
  +INVENTORY.UNTOSSABLE
  Decal "bhole";
  Gun.Pickup "";
  Gun.Throw "";
  Gun.Name "";
  Gun.DitchGun true;
  }
  
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx(invoker.pckup);
			stop;
			
		AltFire:
			TNT1 A 0 A_Quake(2, 2, 0, 32, "");
			"####" "#" 0 A_ThrowGun(invoker.throw, invoker.AmmoType1);
			PUNG A 1 Offset(20, 55);
			"####" "#" 1 Offset(10, 45);
			"####" "#" 1 Offset(0, 30);
			"####" "#" 1 Offset(-5, 40);
			"####" "#" 1 Offset(-10, 50);
			TNT1 A 0 A_NoGun(invoker.name, invoker.ditch);
			stop;
	}
}

//used for gun pickups
class GItem : CustomInventory 
{
int ctimer;
string giveitem;
string name;

property Give : giveitem;
property Name : name;

	action void A_GiveGun(class<Inventory> give, class<Inventory> item)
	{
		A_GiveInventory("agun", 1);
		A_GiveInventory(give, 1); //gives the item that you actually need
		A_TakeInventory(item, 1); //removes the item that was used for the pickup
	}

Default
  {
  Inventory.Amount 1;
  Inventory.MaxAmount 1;
  Inventory.PickupSound "misc/w_pkup";
  GItem.Give "";
  +DONTGIB;
  }
  
  override bool TryPickup(in out Actor toucher)
	{
		if (toucher.CountInv("agun"))
		{
			ctimer++;
			if (ctimer==40)
			{
				A_Log("You already have a gun!");
				ctimer = 0;
			}
			return false;
		}
		else
			return Super.TryPickup(toucher);
	}
  
	States
	{
		Pickup:
			TNT1 A 0 A_GiveGun(invoker.giveitem, invoker.name);
			stop;
	}
}

//Scrap ;]
class Scrap : Inventory
{
Default
  {
  Inventory.Amount 1;
  Inventory.MaxAmount 10000;
  }
}

//ScrapItem
class SItem : CustomInventory
{
int ScrapAmt;

property SAmount: ScrapAmt;


Default
  {
  Inventory.PickupSound "misc/ammpkup";
  SItem.SAmount 0;
  +DONTGIB;
  }

	States
	{
		Pickup:
			TNT1 A 0 A_GiveInventory("Scrap", invoker.ScrapAmt);
			stop;
	}
}

enum exprequired
{
	lv2 = 100,
	lv3 = 250,
	lv4 = 400,
	lv5 = 600
}